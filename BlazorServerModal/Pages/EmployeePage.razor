@page "/employees/employee/{employeeId:int}"
@using BlazorServerModal.Data
@inject EmployeeService EmployeeService
@inject NavigationManager NavigationManager
@inject IToastService toastService

<button type="button" class="btn btn-dark" style="margin-bottom: 20px;" @onclick="NavigateToEmployees">
    Back to the employees list
</button>

@if (EmployeeHasNotBeenFound)
{
    <h1>Employee has not been found!</h1>
}
else
{
    if (SelectedEmployee == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
<EditForm Model="@SelectedEmployee" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="FirstName"> First Name</label>
        <InputText id="FirstName" @bind-Value="SelectedEmployee.FirstName" class="form-control" placeholder="First Name" />
    </div>
    <div class="form-group">
        <label for="LastName">Last Name</label>
        <InputText id="LastName" @bind-Value="SelectedEmployee.LastName" class="form-control" placeholder="First Name" />
    </div>
    <div class="form-group">
        <label for="Email">Email</label>
        <InputText id="Email" @bind-Value="SelectedEmployee.Email" class="form-control" placeholder="First Name" aria-describedby="emailHelp"/>
        <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
    </div>
    <div class="form-check">
        <InputCheckbox id="Active" @bind-Value="SelectedEmployee.Active" class="form-check-input" />
        <label class="form-check-label" for="Active">Check if active</label>
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>

</EditForm>
    }

}


@code {
    [Parameter]
    public int EmployeeId { get; set; }
    private Employee SelectedEmployee { get; set; }
    private bool EmployeeHasNotBeenFound { get; set; } = false;

    private void NavigateToEmployees()
    {
        NavigationManager.NavigateTo("employees");
    }

    protected override async Task OnInitializedAsync()
    {
        SelectedEmployee = await EmployeeService.GetEmployeeAsync(EmployeeId);
        if (SelectedEmployee == null)
        {
            EmployeeHasNotBeenFound = true;
        }
    }

    private async Task HandleValidSubmit()
    {
        var response = await EmployeeService.SaveEmployeeData(SelectedEmployee);
        if (response.Item1)
        {
            toastService.ShowSuccess(response.Item2, "ΕΠΙΤΥΧΙΑ");
        }
        else
        {
            toastService.ShowError(response.Item2, "ΕΝΗΜΕΡΩΣΗ");
        }
    }
}