@page "/employees"
@using BlazorServerModal.Data
@using BlazorServerModal.Components
@inject EmployeeService EmployeeService
@inject IModalService Modal
@inject IToastService toastService
@inject NavigationManager NavigationManager

<h3>Employees</h3>
@if (EmployeesDisplayed == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Active</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in EmployeesDisplayed)
            {
                <tr>
                    <td class="align-middle">@employee.Id</td>
                    <td class="align-middle">@employee.FirstName</td>
                    <td class="align-middle">@employee.LastName</td>
                    <td class="align-middle">@employee.Email</td>
                    <td class="align-middle">@employee.Active</td>
                    <td class="align-middle">
                        <button class="btn btn-default" @onclick="@((e) => NavigateToEditEmployee(employee.Id))">Edit</button>
                        <br />
                        <button class="btn btn-default" @onclick="@((e) => DeleteEmployeeHandler(employee.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="container">
        <div class="row">
            <div class="mx-auto">
                <nav aria-label="Page navigation example">
                    <div class="btn-group">
                        <button class="btn btn-default" @onclick="@((e) => PaginationIndexChangedHandler(--SelectedPaginationIndex))">Previous</button>
                        @for (int i = 1; i <= @TotalPaginationPages; i++)
                        {
                            var buttonNumber = i;
                            <button class="btn btn-default @(SelectedPaginationIndex==i ? "text-success":"")" @onclick="@((e) => PaginationIndexChangedHandler(buttonNumber))">@i</button>
                        }
                        <button class="btn btn-default" @onclick="@((e) => PaginationIndexChangedHandler(++SelectedPaginationIndex))">Next</button>
                    </div>
                </nav>
            </div>
        </div>
    </div>
}

@code{

    private Employee[] employees;
    private Employee[] EmployeesDisplayed { get; set; }
    private int SelectedPaginationIndex { get; set; } = 1;
    private const int MAX_EMPLOYEE_ENTRIES = 10;
    private int TotalPaginationPages { get; set; } = 1;
    protected override async Task OnInitializedAsync()
    {
        await LoadEmployeesAsync();
    }

    private async Task LoadEmployeesAsync()
    {
        employees = await EmployeeService.GetEmployeesAsync();
        TotalPaginationPages = (int)(Math.Ceiling((double)employees.Length / MAX_EMPLOYEE_ENTRIES));
        RenderEmployees();
    }

    private void RenderEmployees()
    {
        EmployeesDisplayed = employees
          .Skip(MAX_EMPLOYEE_ENTRIES * (SelectedPaginationIndex - 1))
          .Take(MAX_EMPLOYEE_ENTRIES).ToArray();
    }

    private void PaginationIndexChangedHandler(int selectedIndex)
    {
        if (selectedIndex <= 1)
        {
            SelectedPaginationIndex = 1;
        }
        else if (selectedIndex >= TotalPaginationPages)
        {
            SelectedPaginationIndex = TotalPaginationPages;
        }
        else
        {
            SelectedPaginationIndex = selectedIndex;
        }
        RenderEmployees();
    }

    private async Task DeleteEmployeeHandler(int selectedEmployeeId)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ConfirmationModal.Message), "Είστε σίγουρος;");

        var formModal = Modal.Show<ConfirmationModal>("Διαγραφή", parameters);
        var result = await formModal.Result;

        if (!result.Cancelled)
        {
            var response = await EmployeeService.DeleteEmployee(selectedEmployeeId);
            if (response.Item1)
            {
                await LoadEmployeesAsync();
                toastService.ShowSuccess(response.Item2, "ΕΠΙΤΥΧΙΑ");
            }
            else
            {
                toastService.ShowError(response.Item2, "ΣΦΑΛΜΑ");
            }
        }
        else
        {
            toastService.ShowInfo("Η εργασία ακυρώθηκε.", "ΕΝΗΜΕΡΩΣΗ");
        }
    }

    private void NavigateToEditEmployee(int selectedEmployee)
    {
        NavigationManager.NavigateTo($"employees/employee/{selectedEmployee}");
    }
}
